name: Marine Weather Hourly Collection

on:
  schedule:
    - cron: '7 * * * *'          # UTC, 정각 혼잡 회피 (권장)
  workflow_dispatch: {}

env:
  NOTIFY_TELEGRAM: '1'
  NOTIFY_EMAIL: '1'

jobs:
  marine-weather:
    runs-on: ubuntu-latest
    
    # ✅ 워크플로우 권한 설정 (시크릿 접근 권한 명시)
    permissions:
      contents: read
      actions: read
      secrets: read

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Selenium을 위한 시스템 의존성
        sudo apt-get update
        sudo apt-get install -y chromium-browser chromium-chromedriver xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Compute timestamp (UTC)
      id: now
      run: echo "utc=$(date -u '+%Y-%m-%d %H:%M UTC')" >> "$GITHUB_OUTPUT"

    # ✅ 게이트 스텝: secrets 보유 여부를 불린 출력으로 계산 (시크릿 직접 비교 문제 해결)
    - name: Compute gates
      id: gates
      run: |
        echo "has_tg=${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}" >> "$GITHUB_OUTPUT"
        echo "has_mail=${{ secrets.MAIL_USERNAME != '' && secrets.MAIL_PASSWORD != '' && secrets.MAIL_TO != '' }}" >> "$GITHUB_OUTPUT"
        echo "has_apis=${{ secrets.STORMGLASS_API_KEY != '' || secrets.WORLDTIDES_API_KEY != '' }}" >> "$GITHUB_OUTPUT"
        
        # 시크릿 상태 진단 출력 (*** 마스킹으로 보안 유지)
        echo "🔍 시크릿 상태 진단:"
        echo "  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && '설정됨' || '없음' }}"
        echo "  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID != '' && '설정됨' || '없음' }}"
        echo "  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME != '' && '설정됨' || '없음' }}"
        echo "  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD != '' && '설정됨' || '없음' }}"
        echo "  MAIL_TO: ${{ secrets.MAIL_TO != '' && '설정됨' || '없음' }}"
        echo "  STORMGLASS_API_KEY: ${{ secrets.STORMGLASS_API_KEY != '' && '설정됨' || '없음' }}"
        echo "  WORLDTIDES_API_KEY: ${{ secrets.WORLDTIDES_API_KEY != '' && '설정됨' || '없음' }}"
        
    - name: Run marine weather collection
      run: |
        set -eo pipefail
        mkdir -p out
        python scripts/weather_job.py --location "AGI" --hours 24 --out out

    # ✅ TXT 없으면 HTML→TXT 폴백 생성
    - name: Ensure summary.txt exists
      run: |
        if [ ! -f out/summary.txt ] && [ -f out/summary.html ]; then
          # 매우 단순 변환: 태그 제거
          sed -E 's/<[^>]*>//g' out/summary.html | sed 's/&nbsp;/ /g' > out/summary.txt
        fi
        ls -l out || true
        
    # ✅ 텔레그램: 4096자 초과 시 sendDocument로 자동 전환, 실패시 로그 남김
    - name: Telegram notify (text or document)
      if: ${{ steps.gates.outputs.has_tg == 'true' }}
      env:
        TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        set -eo pipefail
        if [ ! -f out/summary.txt ] && [ ! -f out/summary.html ]; then
          echo "::warning::No summary files; skip Telegram."
          exit 0
        fi

        # 길이 확인(바이트 기준 러프체크)
        BYTES=$( [ -f out/summary.txt ] && wc -c < out/summary.txt || echo 0 )
        if [ "$BYTES" -gt 4000 ] && [ -f out/summary.html ]; then
          echo "Message >4096 bytes → sendDocument"
          curl -fsS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendDocument" \
            -F chat_id="${TG_CHAT}" \
            -F caption="Marine Weather — ${{ steps.now.outputs.utc }}" \
            -F document=@out/summary.html \
            -o .tg_resp.json
        else
          curl -fsS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TG_CHAT}" \
            --data-urlencode "disable_web_page_preview=true" \
            --data-urlencode "parse_mode=HTML" \
            --data-urlencode "text@out/summary.txt" \
            -o .tg_resp.json
        fi
        echo "Telegram response:"; cat .tg_resp.json
        # 실패시 curl -f 덕분에 여기 못 옴

    - name: Email notify (Gmail SMTP via action)
      if: ${{ steps.gates.outputs.has_mail == 'true' }}
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}     # Gmail 주소
        password: ${{ secrets.MAIL_PASSWORD }}     # ✅ Google App Password 필요
        subject: "🌊 Marine Weather Report - AGI - ${{ steps.now.outputs.utc }}"
        to: ${{ secrets.MAIL_TO }}
        from: "HVDC Weather Bot <${{ secrets.MAIL_USERNAME }}>"
        html_body: file://out/summary.html

    # ✅ 시크릿 진단 스텝 (시크릿 "사라짐" 문제 해결)
    - name: Telegram ping (secrets validation)
      if: ${{ steps.gates.outputs.has_tg == 'true' }}
      run: |
        echo "🔍 Telegram 시크릿 검증 시작..."
        
        # 1. Bot Token 유효성 확인
        echo "📡 Bot Token 검증 중..."
        BOT_INFO=$(curl -fsS "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getMe")
        echo "Bot Info: $BOT_INFO"
        
        # 2. Chat ID 권한 확인
        echo "📱 Chat ID 검증 중..."
        curl -fsS -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          --data-urlencode "text=🔍 HVDC Marine Weather System - 시크릿 검증 성공 ${{ steps.now.outputs.utc }}" \
          --data-urlencode "parse_mode=HTML" \
          -o .tg_ping_response.json
        
        echo "✅ Telegram 시크릿 검증 완료"
        echo "Response: $(cat .tg_ping_response.json)"

    - name: Upload artifacts (optional)
      uses: actions/upload-artifact@v4
      with:
        name: marine-weather-${{ github.run_number }}
        path: out/*
        if-no-files-found: ignore
        retention-days: 7
