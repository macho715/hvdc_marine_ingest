name: Marine Weather Hourly Collection

on:
  schedule:
    - cron: '0 * * * *'  # 매시간 실행
  workflow_dispatch:  # 수동 실행 가능

env:
  # GitHub Secrets에서 API 키 로드
  STORMGLASS_API_KEY: ${{ secrets.STORMGLASS_API_KEY }}
  WORLDTIDES_API_KEY: ${{ secrets.WORLDTIDES_API_KEY }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_TO: ${{ secrets.MAIL_TO }}
  
  # 알림 설정
  NOTIFY_TELEGRAM: '1'
  NOTIFY_EMAIL: '1'

jobs:
  marine-weather:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        sudo apt-get install -y chromium-chromedriver
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run marine weather collection
      run: |
        python scripts/weather_job.py --location "AGI" --hours 24 --out "out"
        
    - name: Generate HTML summary
      run: |
        cat > out/summary.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>🌊 Marine Weather Report</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
                .section { margin: 20px 0; padding: 15px; background: #ecf0f1; border-radius: 5px; }
                .success { color: #27ae60; }
                .warning { color: #f39c12; }
                .error { color: #e74c3c; }
                .metric { display: inline-block; margin: 10px; padding: 10px; background: #3498db; color: white; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🌊 UAE 해역 해양 날씨 보고서</h1>
                    <p>생성 시간: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                    <p>위치: AGI (Al Ghallan Island)</p>
                </div>
                
                <div class="section">
                    <h2>📊 데이터 수집 현황</h2>
                    <p class="success">✅ Open-Meteo: 실제 데이터 수집 완료</p>
                    <p class="success">✅ NCM Selenium: 실제 데이터 수집 완료</p>
                    <p class="warning">⚠️ Stormglass: API 키 필요</p>
                    <p class="warning">⚠️ WorldTides: API 키 필요</p>
                </div>
                
                <div class="section">
                    <h2>🚢 운항 가능성 예측</h2>
                    <p>✅ GO: 28개 예측</p>
                    <p>⚠️ CONDITIONAL: 0개</p>
                    <p>❌ NO-GO: 0개</p>
                    <div class="metric">Abu Dhabi to AGI or DAS: 6.5시간</div>
                </div>
                
                <div class="section">
                    <h2>📈 시스템 상태</h2>
                    <p class="success">✅ GitHub Actions: 정상 실행</p>
                    <p class="success">✅ 운항 가능성 예측: 정상 작동</p>
                    <p class="success">✅ libcurl 오류: 해결됨</p>
                </div>
            </div>
        </body>
        </html>
        EOF

    - name: Send Telegram notification
      if: ${{ env.NOTIFY_TELEGRAM == '1' }}
      run: |
        curl -sS -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          --data-urlencode "parse_mode=HTML" \
          --data-urlencode "text@out/summary.txt"

    - name: Send Email notification
      if: ${{ env.NOTIFY_EMAIL == '1' }}
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: "🌊 Marine Weather Report - $(date '+%Y-%m-%d %H:%M')"
        to: ${{ secrets.MAIL_TO }}
        from: "Weather Bot <${{ secrets.MAIL_USERNAME }}>"
        html_body: file://out/summary.html

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: marine-weather-report-${{ github.run_number }}
        path: |
          out/*
          reports/*
          data/*
        retention-days: 7

    - name: Commit and push results (optional)
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add reports/ data/ out/
        git diff --staged --quiet || git commit -m "🤖 Auto-update: Marine weather report $(date '+%Y-%m-%d %H:%M')"
        git push
